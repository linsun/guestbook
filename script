Services (github.com/linsun/guestbook, github.com/linsun/analyzer, github.com/linsun/animatedbook)

1. UI - managed istio.
2. switch to another cluster via cli
3. app working without using istio.
4. enable sidecar via auto injection (enable namespace) and set a policy now with mtls.  policy will disable animatedbook working
(try kubectl delete pod if it will work with auto injection)

Step 2:
# guestbook already installed

cat <<EOF | kubectl create -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: guestbook
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: analyzer
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: animatedbook
EOF

kubectl create -f guestbook/guestbook-deployment.yaml -f guestbook/guestbook-service.yaml
kubectl create -f animatedbook/animatedbook-deployment.yaml -f animatedbook/animatedbook-service.yaml
kubectl create -f analyzer/analyzer-deployment.yaml -f analyzer/analyzer-service.yaml

Step 4:
# set up auto inject for default namespace
kubectl label namespace default istio-injection=enabled --overwrite

# NOTE the analyzer or animatedbook won't work now unless you set up the service entries
# set up service entry for animatedbook
cat <<EOF | kubectl create -f -
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: giphy
spec:
  hosts:
  - "api.giphy.com"
  ports:
  - number: 80
    name: http
    protocol: http
  resolution: DNS
EOF

# set up service entry for analyzer
cat <<EOF | kubectl create -f -
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: iam-watson
spec:
  hosts:
  - iam.bluemix.net
  - "*.watsonplatform.net"
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  resolution: NONE
  location: MESH_EXTERNAL
EOF

# delete guestbook, analyzer, & animatedbook for auto injection
kubectl delete pod -l app=analyzer
kubectl delete pod -l app=guestbook
kubectl delete pod -l app=animatedbook

# guestbook and animatedbook should be working now with istio enabled

# set analyzer mtls policy
cat <<EOF | kubectl create -f -
apiVersion: authentication.istio.io/v1alpha1
kind: Policy
metadata:
  name: mtls-to-analyzer
  namespace: default
spec:
  targets:
  - name: analyzer
  peers:
  - mtls:
EOF

# set analyzer mtls destination rule
cat <<EOF | kubectl create -f -
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: route-with-mtls-for-analyzer
  namespace: default
spec:
  host: "analyzer.default.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
EOF

# enable RBAC config for analyzer service only
cat <<EOF | kubectl apply -f -
apiVersion: "rbac.istio.io/v1alpha1"
kind: RbacConfig
metadata:
  name: default
spec:
  mode: 'ON_WITH_INCLUSION'
  inclusion:
    services: ["analyzer.default.svc.cluster.local"]
EOF

# create analyzer viewer and rolebinding that allows access only from guestbook
cat <<EOF | kubectl apply -f -
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRole
metadata:
  name: analyzer-viewer
  namespace: default
spec:
  rules:
  - services: ["analyzer.default.svc.cluster.local"]
    methods: ["POST"]
---
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRoleBinding
metadata:
  name: bind-analyzer
  namespace: default
spec:
  subjects:
  - user: "cluster.local/ns/default/sa/guestbook"
  roleRef:
    kind: ServiceRole
    name: "analyzer-viewer"
EOF

# WAIT 15 seconds or so, animated book should not be able to talk to analyzer now


# Kiali:
kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=kiali -o jsonpath='{.items[0].metadata.name}') 20001:20001 &

# Grafana:
kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=grafana -o jsonpath='{.items[0].metadata.name}') 3000:3000 &

# View auth policy etc:
kubectl get policy
kubectl get rbacConfig
kubectl get ServiceRole
kubectl get ServiceRoleBinding

# clean up the database
Guestbook uses redis, you may redeploy redis to clean it up.
Animatedbook uses in memory db, you may restart animated book to clean it up.
